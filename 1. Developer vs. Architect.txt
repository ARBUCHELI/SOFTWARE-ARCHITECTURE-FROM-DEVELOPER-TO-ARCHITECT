# 1. Developer vs. Architect
----------------------------

* Big picture vs. little picture
--------------------------------

* Architect
-----------
. Keep many different components in your mind.

. Have a rudimentary knowledge of how they all work.

. Software architects focus on the big picture.

. High-level understanding.


* Potential Questions
---------------------
. Will a performance change occur?

. Will it cause another component to behave differently?

. How will it impact the application?

. Will it expose a bug?

. Will it have an impact at multiple levels?

. Will parts of the system need to change?

. Will other teams support the changes?

		* The scope of responsibility expands as an architect.

		* You now focus on wide-ranging interaction between multiple, disparate systems.

		* Management and others look to you for external knowledge and syste understanding.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Teacher rather than dictator
------------------------------

* Developer as Hero
---------------------
. Person others turn to in order to fix problems.

. Brings delayed projects back on track.

. Fixes critical systems.


* Developer Hero: Architects
----------------------------
. Assume same skills are useful?

. Isn't the architect the one ultimately technically responsible?

		* The "hero" developers must make great architects.


* Newly Promoted Architects
---------------------------
. Take all available data.

. Internalize it.

. Solve the problem.

. Broadcast the solution.

		* Simply announce the answer.


* Best Architects
-----------------
. Work with developers.

. Understand the facts.

. Guide team to a solution.

. Lead developers to the right decisions.


		* The best architects guide developers to the rigth decisions.

		* The best architects aren't dictators.  They are teachers.


. The best architects work with their teams.

. Need a motivated team to do their best work.

. Leverage experience of a team.

. Train, encourage, and energize the team members.

------------------------------------------------------------------------------------------------------------------------------------------------------------------



































