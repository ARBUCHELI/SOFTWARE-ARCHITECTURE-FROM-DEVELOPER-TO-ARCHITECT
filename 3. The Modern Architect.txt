# 3. THE MODERN ARCHITECT
-------------------------

* Agile architecture process
----------------------------
Architecting a modern application is not simply a matter of drawing up an architecture, throwing it over the wall and expecting the developers to build it and the operations team to run
it.


* Modern Application Architecture
---------------------------------
. Ongoing collaboration between developers, product managers, operations, and infrastructure engineers.

. Fluid and dynamic.

. Requires constant and incremental improvement.

	* THE BEST WAY TO BUILD AND NURTURE A MODERN APPLICATION ARCHITECTURE IT TO USE AGILE ARCHITECTURE METHODS.
	* THESE ARE THE SAME TYPE OF AGILE PROCESSES USED BY DEVELOPERS.S

* Agile Foundations
-------------------
. Doug Rose.

. Agile Software Development
----------------------------
. Shashi Shekhar

* Constantly Listening to Feedback
----------------------------------
. Developers, operations, product management, upper management, and customers.

. Usage grows, expectations clarify, changes are required.

. Listening and responding to feedback.

	* THE SAME AGILE SKILLS YOU LEARNED AS A DEVELOPER WILL HELP YOU MAINTAIN DYNAMIC ARCHITECTURES.

* Utilizing Sprints
-------------------
. Sprint cycle is independent and unique from development cycle
	- Architecture should be a bit more stable than development cycles

. Architecture cycle should lead develoment cycle

. Updated architecture becomes input into development cycle

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Growing the team and team skills
----------------------------------

* Training and Growing Team Skills
----------------------------------
. Major responsibility of the architect.

. You may not directly train the team, but you are ultimately responsible for their growth.

. Training is a constant process.

* Extension of Management Team
------------------------------
. Evaluate current knowledge and expertise.

. Determine the skills necessary to be sucessful.

. Create a plan to fill gaps.

. Provide a growth path for the less experienced.

	* MAKING SURE YOUR TEAM HAS THE SKILLS IT NEEDS WHEHN THEY NEED TO BE APPLIED IS A CRITICAL ROLE FOR A SOFTWARE ARCHITECT.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Dev and ops: Both work together
---------------------------------

* Dev and Ops
-------------
. Even with traditional dev-only teams 
	- You as an architect still have operations responsibility

. Your architecture decisions must focus both on dev and ops

	* FOR EXAMPLE, YOUR ARCHITECTURE WILL NEED TO DEAL WITH HOW THE APPLICATION RESPONDS UNDER HIGH LOADS

* High Load
-----------
. Does it brown out?

. Does it fall behind?

. What is the load limit?

	* WITHOUT A CORPORATE, SYSTEMIC, DEVOPS CULTURE, YOUR DEVELOPERS MAY FEEL THESE REQUIREMENTS AREN'T THEIR RESPONSIBILITY.

	* IN ALL ORGANIZATIONS, THE ARCHITECT MUST THIN ABOUT OPERATIONAL REQUIREMENTS, NOT JUST DEVELOPMENT.

* Separate Types of Architects
------------------------------
. Separate operations and development architects 
	- Not very common

. Doesn't change scope of responsibility, just authority

. Development architects are still responsible for operational aspects

. Both architects need to work with the other architect closely

. Avoid "someone else's problem" mentality.

	* YOU HAVE AN OPPORTUNITY TO EVANGELIZE AND DRIVE FORWARD A DEVOPS CULTURE WITHIN THE ORGANIZATION.

------------------------------------------------------------------------------------------------------------------------------------------------------------------
























































































